// Code generated by MockGen. DO NOT EDIT.
// Source: ../scope.go

// Package mock_privateendpoints is a generated GoMock package.
package mock_privateendpoints

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	types "k8s.io/apimachinery/pkg/types"
	v1beta1 "sigs.k8s.io/cluster-api-provider-azure/api/v1beta1"
)

// MockScope is a mock of Scope interface.
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
}

// MockScopeMockRecorder is the mock recorder for MockScope.
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance.
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// AddPrivateEndpointSpec mocks base method.
func (m *MockScope) AddPrivateEndpointSpec(arg0 v1beta1.PrivateEndpointSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPrivateEndpointSpec", arg0)
}

// AddPrivateEndpointSpec indicates an expected call of AddPrivateEndpointSpec.
func (mr *MockScopeMockRecorder) AddPrivateEndpointSpec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrivateEndpointSpec", reflect.TypeOf((*MockScope)(nil).AddPrivateEndpointSpec), arg0)
}

// Close mocks base method.
func (m *MockScope) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScopeMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScope)(nil).Close), ctx)
}

// ContainsPrivateEndpointSpec mocks base method.
func (m *MockScope) ContainsPrivateEndpointSpec(arg0 v1beta1.PrivateEndpointSpec) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsPrivateEndpointSpec", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ContainsPrivateEndpointSpec indicates an expected call of ContainsPrivateEndpointSpec.
func (mr *MockScopeMockRecorder) ContainsPrivateEndpointSpec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsPrivateEndpointSpec", reflect.TypeOf((*MockScope)(nil).ContainsPrivateEndpointSpec), arg0)
}

// GetClusterName mocks base method.
func (m *MockScope) GetClusterName() types.NamespacedName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterName")
	ret0, _ := ret[0].(types.NamespacedName)
	return ret0
}

// GetClusterName indicates an expected call of GetClusterName.
func (mr *MockScopeMockRecorder) GetClusterName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterName", reflect.TypeOf((*MockScope)(nil).GetClusterName))
}

// GetLocation mocks base method.
func (m *MockScope) GetLocation() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockScopeMockRecorder) GetLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockScope)(nil).GetLocation))
}

// GetPrivateEndpointIPAddress mocks base method.
func (m *MockScope) GetPrivateEndpointIPAddress(ctx context.Context, privateEndpointName string) (net.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateEndpointIPAddress", ctx, privateEndpointName)
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateEndpointIPAddress indicates an expected call of GetPrivateEndpointIPAddress.
func (mr *MockScopeMockRecorder) GetPrivateEndpointIPAddress(ctx, privateEndpointName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateEndpointIPAddress", reflect.TypeOf((*MockScope)(nil).GetPrivateEndpointIPAddress), ctx, privateEndpointName)
}

// GetPrivateEndpoints mocks base method.
func (m *MockScope) GetPrivateEndpoints() []v1beta1.PrivateEndpointSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateEndpoints")
	ret0, _ := ret[0].([]v1beta1.PrivateEndpointSpec)
	return ret0
}

// GetPrivateEndpoints indicates an expected call of GetPrivateEndpoints.
func (mr *MockScopeMockRecorder) GetPrivateEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateEndpoints", reflect.TypeOf((*MockScope)(nil).GetPrivateEndpoints))
}

// GetPrivateEndpointsToWorkloadCluster mocks base method.
func (m *MockScope) GetPrivateEndpointsToWorkloadCluster(workloadClusterSubscriptionID, workloadClusterResourceGroup string) []v1beta1.PrivateEndpointSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateEndpointsToWorkloadCluster", workloadClusterSubscriptionID, workloadClusterResourceGroup)
	ret0, _ := ret[0].([]v1beta1.PrivateEndpointSpec)
	return ret0
}

// GetPrivateEndpointsToWorkloadCluster indicates an expected call of GetPrivateEndpointsToWorkloadCluster.
func (mr *MockScopeMockRecorder) GetPrivateEndpointsToWorkloadCluster(workloadClusterSubscriptionID, workloadClusterResourceGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateEndpointsToWorkloadCluster", reflect.TypeOf((*MockScope)(nil).GetPrivateEndpointsToWorkloadCluster), workloadClusterSubscriptionID, workloadClusterResourceGroup)
}

// GetResourceGroup mocks base method.
func (m *MockScope) GetResourceGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetResourceGroup indicates an expected call of GetResourceGroup.
func (mr *MockScopeMockRecorder) GetResourceGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceGroup", reflect.TypeOf((*MockScope)(nil).GetResourceGroup))
}

// GetSubscriptionID mocks base method.
func (m *MockScope) GetSubscriptionID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubscriptionID indicates an expected call of GetSubscriptionID.
func (mr *MockScopeMockRecorder) GetSubscriptionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionID", reflect.TypeOf((*MockScope)(nil).GetSubscriptionID))
}

// PatchObject mocks base method.
func (m *MockScope) PatchObject(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchObject", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchObject indicates an expected call of PatchObject.
func (mr *MockScopeMockRecorder) PatchObject(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchObject", reflect.TypeOf((*MockScope)(nil).PatchObject), ctx)
}

// RemovePrivateEndpointByName mocks base method.
func (m *MockScope) RemovePrivateEndpointByName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemovePrivateEndpointByName", arg0)
}

// RemovePrivateEndpointByName indicates an expected call of RemovePrivateEndpointByName.
func (mr *MockScopeMockRecorder) RemovePrivateEndpointByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePrivateEndpointByName", reflect.TypeOf((*MockScope)(nil).RemovePrivateEndpointByName), arg0)
}
